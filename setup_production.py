#!/usr/bin/env python3
"""
Script para configurar o ambiente de produ√ß√£o do Help Alphaclin
"""

import os
import secrets
import sys
from pathlib import Path

def generate_secret_key():
    """Gera uma chave secreta segura"""
    return secrets.token_hex(32)

def create_env_file():
    """Cria o arquivo .env para produ√ß√£o"""
    env_file = Path('.env')
    
    if env_file.exists():
        print("‚ö†Ô∏è  Arquivo .env j√° existe!")
        response = input("Deseja sobrescrever? (s/N): ").lower()
        if response != 's':
            print("‚ùå Opera√ß√£o cancelada")
            return False
    
    # Gerar chave secreta
    secret_key = generate_secret_key()
    
    # Template do arquivo .env para produ√ß√£o
    env_content = f"""# ========================================
# CONFIGURA√á√ïES DE PRODU√á√ÉO - HELP ALPHACLIN
# ========================================

# AMBIENTE
FLASK_ENV=production

# CONFIGURA√á√ïES CR√çTICAS
SECRET_KEY={secret_key}

# Configure a URL do seu banco de dados de produ√ß√£o
# Exemplo PostgreSQL: postgresql://user:password@localhost/helpalphaclin
# Exemplo MySQL: mysql://user:password@localhost/helpalphaclin
DATABASE_URL=sqlite:///helpalphaclin.db

# CONFIGURA√á√ïES DE SERVIDOR
FLASK_HOST=0.0.0.0
FLASK_PORT=5000

# CONFIGURA√á√ïES DE SEGURAN√áA
WTF_CSRF_ENABLED=True
WTF_CSRF_TIME_LIMIT=3600
PERMANENT_SESSION_LIFETIME=28800

# CONFIGURA√á√ïES DE UPLOAD
MAX_CONTENT_LENGTH=16777216
UPLOAD_FOLDER=app/uploads
DOWNLOAD_FOLDER=app/downloads

# CONFIGURA√á√ïES DE PAGINA√á√ÉO
EXAMES_PER_PAGE=9
ADMIN_EXAMES_PER_PAGE=9

# CONFIGURA√á√ïES DE LOG
LOG_LEVEL=WARNING
LOG_FILE=logs/app.log

# CONFIGURA√á√ïES DE RATE LIMITING
RATELIMIT_STORAGE_URL=memory://
RATELIMIT_DEFAULT=200 per day
RATELIMIT_STORAGE_OPTIONS={{}}

# CONFIGURA√á√ïES DE CACHE
CACHE_TYPE=simple
CACHE_DEFAULT_TIMEOUT=300

# ========================================
# IMPORTANTE: Configure DATABASE_URL para seu banco de produ√ß√£o!
# ========================================
"""
    
    try:
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        print("‚úÖ Arquivo .env criado com sucesso!")
        print(f"üîë Chave secreta gerada: {secret_key[:16]}...")
        print("\n‚ö†Ô∏è  IMPORTANTE:")
        print("1. Configure DATABASE_URL para seu banco de produ√ß√£o")
        print("2. Ajuste outras configura√ß√µes conforme necess√°rio")
        print("3. Mantenha o arquivo .env seguro e n√£o o compartilhe")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivo .env: {e}")
        return False

def check_production_requirements():
    """Verifica se os requisitos para produ√ß√£o est√£o atendidos"""
    print("üîç Verificando requisitos para produ√ß√£o...")
    
    # Verificar se o arquivo .env existe
    if not Path('.env').exists():
        print("‚ùå Arquivo .env n√£o encontrado")
        return False
    
    # Verificar vari√°veis cr√≠ticas
    from dotenv import load_dotenv
    load_dotenv()
    
    required_vars = ['SECRET_KEY', 'DATABASE_URL']
    missing_vars = []
    
    for var in required_vars:
        value = os.environ.get(var)
        if not value or value == 'dev-secret-key-change-in-production':
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Vari√°veis obrigat√≥rias n√£o configuradas: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ Todos os requisitos atendidos!")
    return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Configurador de Produ√ß√£o - Help Alphaclin")
    print("=" * 50)
    
    if len(sys.argv) > 1 and sys.argv[1] == 'check':
        check_production_requirements()
        return
    
    print("Escolha uma op√ß√£o:")
    print("1. Criar arquivo .env para produ√ß√£o")
    print("2. Verificar requisitos de produ√ß√£o")
    print("3. Sair")
    
    try:
        choice = input("\nOp√ß√£o: ").strip()
        
        if choice == '1':
            create_env_file()
        elif choice == '2':
            check_production_requirements()
        elif choice == '3':
            print("üëã At√© logo!")
        else:
            print("‚ùå Op√ß√£o inv√°lida")
            
    except KeyboardInterrupt:
        print("\nüëã Opera√ß√£o cancelada pelo usu√°rio")

if __name__ == '__main__':
    main() 